{"version":3,"file":"urql-core-chunk.mjs","sources":["../src/utils/error.ts","../src/utils/hash.ts","../src/utils/variables.ts","../src/utils/request.ts","../src/utils/result.ts","../src/internal/fetchOptions.ts","../src/internal/fetchSource.ts"],"sourcesContent":["import { GraphQLError } from '@0no-co/graphql.web';\nimport type { ErrorLike } from '../types';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr) return `[Network] ${networkErr.message}`;\n  if (graphQlErrs) {\n    for (const err of graphQlErrs) {\n      if (error) error += '\\n';\n      error += `[GraphQL] ${err.message}`;\n    }\n  }\n  return error;\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (\n    error &&\n    error.message &&\n    (error.extensions || error.name === 'GraphQLError')\n  ) {\n    return error;\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return new GraphQLError(error as any);\n  }\n};\n\n/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.\n *\n * @remarks\n * During a GraphQL request, either the request can fail entirely, causing a network error,\n * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}\n * to contain an array of GraphQL errors.\n *\n * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}\n * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only\n * a subset of error cases.\n *\n * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling\n * GraphQL errors and the `CombinedError`.\n */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n\n  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.\n   *\n   * @remarks\n   * If an {@link ExecutionResult} received from the API contains a list of errors,\n   * the `CombinedError` will rehydrate them, normalize them to\n   * {@link GraphQLError | GraphQLErrors} and list them here.\n   * An empty list indicates that no GraphQL error has been sent by the API.\n   */\n  public graphQLErrors: GraphQLError[];\n\n  /** Set to an error, if a GraphQL request has failed outright.\n   *\n   * @remarks\n   * A GraphQL over HTTP request may fail and not reach the API. Any error that\n   * prevents a GraphQl request outright, will be considered a “network error” and\n   * set here.\n   */\n  public networkError?: Error;\n\n  /** Set to the {@link Response} object a fetch exchange received.\n   *\n   * @remarks\n   * If a built-in fetch {@link Exchange} is used in `urql`, this may\n   * be set to the {@link Response} object of the Fetch API response.\n   * However, since `urql` doesn’t assume that all users will use HTTP\n   * as the only or exclusive transport for GraphQL this property is\n   * neither typed nor guaranteed and may be re-used for other purposes\n   * by non-fetch exchanges.\n   *\n   * Hint: It can be useful to use `response.status` here, however, if\n   * you plan on relying on this being a {@link Response} in your app,\n   * which it is by default, then make sure you add some extra checks\n   * before blindly assuming so!\n   */\n  public response?: any;\n\n  constructor(input: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | ErrorLike>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (input.graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(\n      input.networkError,\n      normalizedGraphQLErrors\n    );\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = input.networkError;\n    this.response = input.response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","/** A hash value as computed by {@link phash}.\n *\n * @remarks\n * Typically `HashValue`s are used as hashes and keys of GraphQL documents,\n * variables, and combined, for GraphQL requests.\n */\nexport type HashValue = number & {\n  /** Marker to indicate that a `HashValue` may not be created by a user.\n   *\n   * @remarks\n   * `HashValue`s are created by {@link phash} and are marked as such to not mix them\n   * up with other numbers and prevent them from being created or used outside of this\n   * hashing function.\n   *\n   * @internal\n   */\n  readonly _opaque: unique symbol;\n};\n\n/** Computes a djb2 hash of the given string.\n *\n * @param x - the string to be hashed\n * @param seed - optionally a prior hash for progressive hashing\n * @returns a hash value, i.e. a number\n *\n * @remark\n * This is the hashing function used throughout `urql`, primarily to compute\n * {@link Operation.key}.\n *\n * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.\n */\nexport const phash = (x: string, seed?: HashValue): HashValue => {\n  let h = (seed || 5381) | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++)\n    h = (h << 5) + h + x.charCodeAt(i);\n  return h as HashValue;\n};\n","export type FileMap = Map<string, File | Blob>;\n\nconst seen = new Set();\nconst cache = new WeakMap();\n\nconst stringify = (x: any): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return stringify(x.toJSON());\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (const value of x) {\n      if (out.length > 1) out += ',';\n      out += stringify(value) || 'null';\n    }\n    out += ']';\n    return out;\n  } else if (\n    (FileConstructor !== NoopConstructor && x instanceof FileConstructor) ||\n    (BlobConstructor !== NoopConstructor && x instanceof BlobConstructor)\n  ) {\n    return 'null';\n  }\n\n  const keys = Object.keys(x).sort();\n  if (!keys.length && x.constructor && x.constructor !== Object) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return stringify({ __key: key });\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (const key of keys) {\n    const value = stringify(x[key]);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nconst extract = (map: FileMap, path: string, x: any) => {\n  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) {\n    /*noop*/\n  } else if (Array.isArray(x)) {\n    for (let i = 0, l = x.length; i < l; i++)\n      extract(map, `${path}.${i}`, x[i]);\n  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {\n    map.set(path, x as File | Blob);\n  } else {\n    seen.add(x);\n    for (const key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);\n  }\n};\n\n/** A stable stringifier for GraphQL variables objects.\n *\n * @param x - any JSON-like data.\n * @return A JSON string.\n *\n * @remarks\n * This utility creates a stable JSON string from any passed data,\n * and protects itself from throwing.\n *\n * The JSON string is stable insofar as objects’ keys are sorted,\n * and instances of non-plain objects are replaced with random keys\n * replacing their values, which remain stable for the objects’\n * instance.\n */\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n\nclass NoopConstructor {}\nconst FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;\nconst BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;\n\nexport const extractFiles = (x: any): FileMap => {\n  const map: FileMap = new Map();\n  if (\n    FileConstructor !== NoopConstructor ||\n    BlobConstructor !== NoopConstructor\n  ) {\n    seen.clear();\n    extract(map, 'variables', x);\n  }\n  return map;\n};\n","import { Kind, parse, print } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './graphql';\nimport type { HashValue } from './hash';\nimport { phash } from './hash';\nimport { stringifyVariables } from './variables';\n\nimport type {\n  DocumentInput,\n  TypedDocumentNode,\n  AnyVariables,\n  GraphQLRequest,\n  RequestExtensions,\n} from '../types';\n\n/** A `DocumentNode` annotated with its hashed key.\n * @internal\n */\nexport type KeyedDocumentNode = TypedDocumentNode & {\n  __key: HashValue;\n};\n\nconst SOURCE_NAME = 'gql';\nconst GRAPHQL_STRING_RE = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nconst REPLACE_CHAR_RE = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\n\nconst replaceOutsideStrings = (str: string, idx: number) =>\n  idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\\n') : str;\n\n/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */\nconst sanitizeDocument = (node: string): string =>\n  node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();\n\nconst prints = new Map<DocumentNode | DefinitionNode, string>();\nconst docs = new Map<HashValue, KeyedDocumentNode>();\n\n/** A cached printing function for GraphQL documents.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A normalized printed string of the passed GraphQL document.\n *\n * @remarks\n * This function accepts a GraphQL query string or {@link DocumentNode},\n * then prints and sanitizes it. The sanitizer takes care of removing\n * comments, which otherwise alter the key of the document although the\n * document is otherwise equivalent to another.\n *\n * When a {@link DocumentNode} is passed to this function, it caches its\n * output by modifying the `loc.source.body` property on the GraphQL node.\n */\nexport const stringifyDocument = (\n  node: string | DefinitionNode | DocumentNode\n): string => {\n  let printed: string;\n  if (typeof node === 'string') {\n    printed = sanitizeDocument(node);\n  } else if (node.loc && docs.get((node as KeyedDocumentNode).__key) === node) {\n    printed = node.loc.source.body;\n  } else {\n    printed = prints.get(node) || sanitizeDocument(print(node));\n    prints.set(node, printed);\n  }\n\n  if (typeof node !== 'string' && !node.loc) {\n    (node as any).loc = {\n      start: 0,\n      end: printed.length,\n      source: {\n        body: printed,\n        name: SOURCE_NAME,\n        locationOffset: { line: 1, column: 1 },\n      },\n    };\n  }\n\n  return printed;\n};\n\n/** Computes the hash for a document's string using {@link stringifyDocument}'s output.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link HashValue}\n *\n * @privateRemarks\n * This function adds the operation name of the document to the hash, since sometimes\n * a merged document with multiple operations may be used. Although `urql` requires a\n * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`\n * of a `DocumentNode` is used, this string may still contain multiple operations and\n * the resulting hash should account for only one at a time.\n */\nconst hashDocument = (\n  node: string | DefinitionNode | DocumentNode\n): HashValue => {\n  let key = phash(stringifyDocument(node));\n  // Add the operation name to the produced hash\n  if ((node as DocumentNode).definitions) {\n    const operationName = getOperationName(node as DocumentNode);\n    if (operationName) key = phash(`\\n# ${operationName}`, key);\n  }\n  return key;\n};\n\n/** Returns a canonical version of the passed `DocumentNode` with an added hash key.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link KeyedDocumentNode}\n *\n * @remarks\n * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s\n * or strings of GraphQL documents to its APIs.\n *\n * This function will return a canonical version of a {@link KeyedDocumentNode} no matter\n * which kind of input is passed, avoiding parsing or hashing of passed data as needed.\n */\nexport const keyDocument = (node: string | DocumentNode): KeyedDocumentNode => {\n  let key: HashValue;\n  let query: DocumentNode;\n  if (typeof node === 'string') {\n    key = hashDocument(node);\n    query = docs.get(key) || parse(node, { noLocation: true });\n  } else {\n    key = (node as KeyedDocumentNode).__key || hashDocument(node);\n    query = docs.get(key) || node;\n  }\n\n  // Add location information if it's missing\n  if (!query.loc) stringifyDocument(query);\n\n  (query as KeyedDocumentNode).__key = key;\n  docs.set(key, query as KeyedDocumentNode);\n  return query as KeyedDocumentNode;\n};\n\n/** Creates a `GraphQLRequest` from the passed parameters.\n *\n * @param q - A string of a document or a {@link DocumentNode}\n * @param variables - A variables object for the defined GraphQL operation.\n * @returns A {@link GraphQLRequest}\n *\n * @remarks\n * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,\n * while replacing the document as needed with a canonical version of itself,\n * to avoid parsing, printing, or hashing the same input multiple times.\n *\n * If no variables are passed, canonically it'll default to an empty object,\n * which is removed from the resulting hash key.\n */\nexport const createRequest = <\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  _query: DocumentInput<Data, Variables>,\n  _variables: Variables,\n  extensions?: RequestExtensions | undefined\n): GraphQLRequest<Data, Variables> => {\n  const variables = _variables || ({} as Variables);\n  const query = keyDocument(_query);\n  const printedVars = stringifyVariables(variables);\n  let key = query.__key;\n  if (printedVars !== '{}') key = phash(printedVars, key);\n  return { key, query, variables, extensions };\n};\n\n/** Returns the name of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's name contained within the document, or `undefined`\n */\nexport const getOperationName = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.name ? node.name.value : undefined;\n    }\n  }\n};\n\n/** Returns the type of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's type contained within the document, or `undefined`\n */\nexport const getOperationType = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.operation;\n    }\n  }\n};\n","import type {\n  ExecutionResult,\n  Operation,\n  OperationResult,\n  IncrementalPayload,\n} from '../types';\nimport { CombinedError } from './error';\n\n/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param result - The GraphQL API’s {@link ExecutionResult}.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n *\n * @throws\n * If no data, or errors are contained within the result, or the result is instead an incremental\n * response containing a `path` property, a “No Content” error is thrown.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const makeResult = (\n  operation: Operation,\n  result: ExecutionResult,\n  response?: any\n): OperationResult => {\n  if (\n    !('data' in result) &&\n    (!('errors' in result) || !Array.isArray(result.errors))\n  ) {\n    throw new Error('No Content');\n  }\n\n  const defaultHasNext = operation.kind === 'subscription';\n  return {\n    operation,\n    data: result.data,\n    error: Array.isArray(result.errors)\n      ? new CombinedError({\n          graphQLErrors: result.errors,\n          response,\n        })\n      : undefined,\n    extensions: result.extensions ? { ...result.extensions } : undefined,\n    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,\n    stale: false,\n  };\n};\n\nconst deepMerge = (target: any, source: any) => {\n  if (typeof target === 'object' && target != null) {\n    if (\n      !target.constructor ||\n      target.constructor === Object ||\n      Array.isArray(target)\n    ) {\n      target = Array.isArray(target) ? [...target] : { ...target };\n      for (const key of Object.keys(source))\n        target[key] = deepMerge(target[key], source[key]);\n      return target;\n    }\n  }\n  return source;\n};\n\n/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.\n *\n * @param prevResult - The {@link OperationResult} that preceded this result.\n * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns A new {@link OperationResult} patched with the incremental result.\n *\n * @remarks\n * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of\n * incremental responses into a prior {@link OperationResult}.\n *\n * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new\n * results that modify previous results. In these cases, it'll set a `path` property to modify\n * the result it sent last. This utility is built to handle these cases and merge these payloads\n * into existing {@link OperationResult | OperationResults}.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const mergeResultPatch = (\n  prevResult: OperationResult,\n  nextResult: ExecutionResult,\n  response?: any,\n  pending?: ExecutionResult['pending']\n): OperationResult => {\n  let errors = prevResult.error ? prevResult.error.graphQLErrors : [];\n  let hasExtensions = !!prevResult.extensions || !!nextResult.extensions;\n  const extensions = { ...prevResult.extensions, ...nextResult.extensions };\n\n  let incremental = nextResult.incremental;\n\n  // NOTE: We handle the old version of the incremental delivery payloads as well\n  if ('path' in nextResult) {\n    incremental = [nextResult as IncrementalPayload];\n  }\n\n  const withData = { data: prevResult.data };\n  if (incremental) {\n    for (const patch of incremental) {\n      if (Array.isArray(patch.errors)) {\n        errors.push(...(patch.errors as any));\n      }\n\n      if (patch.extensions) {\n        Object.assign(extensions, patch.extensions);\n        hasExtensions = true;\n      }\n\n      let prop: string | number = 'data';\n      let part: Record<string, any> | Array<any> = withData;\n      let path: readonly (string | number)[] = [];\n      if (patch.path) {\n        path = patch.path;\n      } else if (pending) {\n        const res = pending.find(pendingRes => pendingRes.id === patch.id);\n        if (patch.subPath) {\n          path = [...res!.path, ...patch.subPath];\n        } else {\n          path = res!.path;\n        }\n      }\n\n      for (let i = 0, l = path.length; i < l; prop = path[i++]) {\n        part = part[prop] = Array.isArray(part[prop])\n          ? [...part[prop]]\n          : { ...part[prop] };\n      }\n\n      if (patch.items) {\n        const startIndex = +prop >= 0 ? (prop as number) : 0;\n        for (let i = 0, l = patch.items.length; i < l; i++)\n          part[startIndex + i] = deepMerge(\n            part[startIndex + i],\n            patch.items[i]\n          );\n      } else if (patch.data !== undefined) {\n        part[prop] = deepMerge(part[prop], patch.data);\n      }\n    }\n  } else {\n    withData.data = nextResult.data || prevResult.data;\n    errors = (nextResult.errors as any[]) || errors;\n  }\n\n  return {\n    operation: prevResult.operation,\n    data: withData.data,\n    error: errors.length\n      ? new CombinedError({ graphQLErrors: errors, response })\n      : undefined,\n    extensions: hasExtensions ? extensions : undefined,\n    hasNext:\n      nextResult.hasNext != null ? nextResult.hasNext : prevResult.hasNext,\n    stale: false,\n  };\n};\n\n/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param error - The network-like error that prevented an API result from being delivered.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult} containing only a {@link CombinedError}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n * This function should be used for when the {@link CombinedError.networkError} property is\n * populated and no GraphQL execution actually occurred.\n */\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n  hasNext: false,\n  stale: false,\n});\n","import {\n  stringifyDocument,\n  getOperationName,\n  stringifyVariables,\n  extractFiles,\n} from '../utils';\n\nimport type { AnyVariables, GraphQLRequest, Operation } from '../types';\n\n/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */\nexport interface FetchBody {\n  query?: string;\n  operationName: string | undefined;\n  variables: undefined | Record<string, any>;\n  extensions: undefined | Record<string, any>;\n}\n\n/** Creates a GraphQL over HTTP compliant JSON request body.\n * @param request - An object containing a `query` document and `variables`.\n * @returns A {@link FetchBody}\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n */\nexport function makeFetchBody<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(request: Omit<GraphQLRequest<Data, Variables>, 'key'>): FetchBody {\n  const isAPQ =\n    request.extensions &&\n    request.extensions.persistedQuery &&\n    !request.extensions.persistedQuery.miss;\n  return {\n    query: isAPQ ? undefined : stringifyDocument(request.query),\n    operationName: getOperationName(request.query),\n    variables: request.variables || undefined,\n    extensions: request.extensions,\n  };\n}\n\n/** Creates a URL that will be called for a GraphQL HTTP request.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which may be replaced with a URL.\n *\n * @remarks\n * Creates the URL that’ll be called as part of a GraphQL HTTP request.\n * Built-in fetch exchanges support sending GET requests, even for\n * non-persisted full requests, which this function supports by being\n * able to serialize GraphQL requests into the URL.\n */\nexport const makeFetchURL = (\n  operation: Operation,\n  body?: FetchBody\n): string => {\n  const useGETMethod =\n    operation.kind === 'query' && operation.context.preferGetMethod;\n  if (!useGETMethod || !body) return operation.context.url;\n\n  const url = new URL(operation.context.url);\n  for (const key in body) {\n    const value = body[key];\n    if (value) {\n      url.searchParams.set(\n        key,\n        typeof value === 'object' ? stringifyVariables(value) : value\n      );\n    }\n  }\n\n  const finalUrl = url.toString();\n  if (finalUrl.length > 2047 && useGETMethod !== 'force') {\n    operation.context.preferGetMethod = false;\n    return operation.context.url;\n  }\n\n  return finalUrl;\n};\n\n/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */\nconst serializeBody = (\n  operation: Operation,\n  body?: FetchBody\n): FormData | string | undefined => {\n  const omitBody =\n    operation.kind === 'query' && !!operation.context.preferGetMethod;\n  if (body && !omitBody) {\n    const json = stringifyVariables(body);\n    const files = extractFiles(body.variables);\n    if (files.size) {\n      const form = new FormData();\n      form.append('operations', json);\n      form.append(\n        'map',\n        stringifyVariables({\n          ...[...files.keys()].map(value => [value]),\n        })\n      );\n      let index = 0;\n      for (const file of files.values()) form.append(`${index++}`, file);\n      return form;\n    }\n    return json;\n  }\n};\n\n/** Creates a `RequestInit` object for a given `Operation`.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.\n *\n * @remarks\n * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API\n * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`\n * header.\n *\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport const makeFetchOptions = (\n  operation: Operation,\n  body?: FetchBody\n): RequestInit => {\n  const headers: HeadersInit = {\n    accept:\n      operation.kind === 'subscription'\n        ? 'text/event-stream, multipart/mixed'\n        : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed',\n  };\n  const extraOptions =\n    (typeof operation.context.fetchOptions === 'function'\n      ? operation.context.fetchOptions()\n      : operation.context.fetchOptions) || {};\n  if (extraOptions.headers)\n    for (const key in extraOptions.headers)\n      headers[key.toLowerCase()] = extraOptions.headers[key];\n  const serializedBody = serializeBody(operation, body);\n  if (typeof serializedBody === 'string' && !headers['content-type'])\n    headers['content-type'] = 'application/json';\n  return {\n    ...extraOptions,\n    method: serializedBody ? 'POST' : 'GET',\n    body: serializedBody,\n    headers,\n  };\n};\n","/* Summary: This file handles the HTTP transport via GraphQL over HTTP\n * See: https://graphql.github.io/graphql-over-http/draft/\n *\n * `@urql/core`, by default, implements several RFC'd protocol extensions\n * on top of this. As such, this implementation supports:\n * - [Incremental Delivery](https://github.com/graphql/graphql-over-http/blob/main/rfcs/IncrementalDelivery.md)\n * - [GraphQL over SSE](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverSSE.md)\n *\n * This also supports the \"Defer Stream\" payload format.\n * See: https://github.com/graphql/graphql-wg/blob/main/rfcs/DeferStream.md\n * Implementation for this is located in `../utils/result.ts` in `mergeResultPatch`\n *\n * And; this also supports the GraphQL Multipart spec for file uploads.\n * See: https://github.com/jaydenseric/graphql-multipart-request-spec\n * Implementation for this is located in `../utils/variables.ts` in `extractFiles`,\n * and `./fetchOptions.ts` in `serializeBody`.\n *\n * And; this also supports GET requests (and hence; automatic persisted queries)\n * via the `@urql/exchange-persisted` package.\n *\n * This implementation DOES NOT support Batching.\n * See: https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md\n * Which is deemed out-of-scope, as it's sufficiently unnecessary given\n * modern handling of HTTP requests being in parallel.\n *\n * The implementation in this file needs to make certain accommodations for:\n * - The Web Fetch API\n * - Non-browser or polyfill Fetch APIs\n * - Node.js-like Fetch implementations (see `toString` below)\n *\n * GraphQL over SSE has a reference implementation, which supports non-HTTP/2\n * modes and is a faithful implementation of the spec.\n * See: https://github.com/enisdenjo/graphql-sse\n *\n * GraphQL Inremental Delivery (aka “GraphQL Multipart Responses”) has a\n * reference implementation, which a prior implementation of this file heavily\n * leaned on (See prior attribution comments)\n * See: https://github.com/maraisr/meros\n *\n * This file merges support for all three GraphQL over HTTP response formats\n * via async generators and Wonka’s `fromAsyncIterable`. As part of this, `streamBody`\n * and `split` are the common, cross-compatible base implementations.\n */\n\nimport type { Source } from 'wonka';\nimport { fromAsyncIterable, onEnd, filter, pipe } from 'wonka';\nimport type { Operation, OperationResult, ExecutionResult } from '../types';\nimport { makeResult, makeErrorResult, mergeResultPatch } from '../utils';\n\nconst decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;\nconst boundaryHeaderRe = /boundary=\"?([^=\";]+)\"?/i;\nconst eventStreamRe = /data: ?([^\\n]+)/;\n\ntype ChunkData = Buffer | Uint8Array;\n\n// NOTE: We're avoiding referencing the `Buffer` global here to prevent\n// auto-polyfilling in Webpack\nconst toString = (input: Buffer | ArrayBuffer): string =>\n  input.constructor.name === 'Buffer'\n    ? (input as Buffer).toString()\n    : decoder!.decode(input as ArrayBuffer);\n\nasync function* streamBody(response: Response): AsyncIterableIterator<string> {\n  if (response.body![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any)\n      yield toString(chunk as ChunkData);\n  } else {\n    const reader = response.body!.getReader();\n    let result: ReadableStreamReadResult<ChunkData>;\n    try {\n      while (!(result = await reader.read()).done) yield toString(result.value);\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nasync function* split(\n  chunks: AsyncIterableIterator<string>,\n  boundary: string\n): AsyncIterableIterator<string> {\n  let buffer = '';\n  let boundaryIndex: number;\n  for await (const chunk of chunks) {\n    buffer += chunk;\n    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {\n      yield buffer.slice(0, boundaryIndex);\n      buffer = buffer.slice(boundaryIndex + boundary.length);\n    }\n  }\n}\n\nasync function* parseJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  yield JSON.parse(await response.text());\n}\n\nasync function* parseEventStream(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  let payload: any;\n  for await (const chunk of split(streamBody(response), '\\n\\n')) {\n    const match = chunk.match(eventStreamRe);\n    if (match) {\n      const chunk = match[1];\n      try {\n        yield (payload = JSON.parse(chunk));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n      if (payload && payload.hasNext === false) break;\n    }\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMultipartMixed(\n  contentType: string,\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const boundaryHeader = contentType.match(boundaryHeaderRe);\n  const boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');\n  let isPreamble = true;\n  let payload: any;\n  for await (let chunk of split(streamBody(response), '\\r\\n' + boundary)) {\n    if (isPreamble) {\n      isPreamble = false;\n      const preambleIndex = chunk.indexOf(boundary);\n      if (preambleIndex > -1) {\n        chunk = chunk.slice(preambleIndex + boundary.length);\n      } else {\n        continue;\n      }\n    }\n    try {\n      yield (payload = JSON.parse(chunk.slice(chunk.indexOf('\\r\\n\\r\\n') + 4)));\n    } catch (error) {\n      if (!payload) throw error;\n    }\n    if (payload && payload.hasNext === false) break;\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* fetchOperation(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n) {\n  let networkMode = true;\n  let result: OperationResult | null = null;\n  let response: Response | undefined;\n\n  try {\n    // Delay for a tick to give the Client a chance to cancel the request\n    // if a teardown comes in immediately\n    yield await Promise.resolve();\n\n    response = await (operation.context.fetch || fetch)(url, fetchOptions);\n    const contentType = response.headers.get('Content-Type') || '';\n\n    let results: AsyncIterable<ExecutionResult>;\n    if (/multipart\\/mixed/i.test(contentType)) {\n      results = parseMultipartMixed(contentType, response);\n    } else if (/text\\/event-stream/i.test(contentType)) {\n      results = parseEventStream(response);\n    } else if (!/text\\//i.test(contentType)) {\n      results = parseJSON(response);\n    } else {\n      throw new Error(await response.text());\n    }\n\n    let pending: ExecutionResult['pending'];\n    for await (const payload of results) {\n      if (payload.pending && !result) {\n        pending = payload.pending;\n      } else if (payload.pending) {\n        pending = [...pending!, ...payload.pending];\n      }\n      result = result\n        ? mergeResultPatch(result, payload, response, pending)\n        : makeResult(operation, payload, response);\n      networkMode = false;\n      yield result;\n      networkMode = true;\n    }\n\n    if (!result) {\n      yield (result = makeResult(operation, {}, response));\n    }\n  } catch (error: any) {\n    if (!networkMode) {\n      throw error;\n    }\n\n    yield makeErrorResult(\n      operation,\n      response &&\n        (response.status < 200 || response.status >= 300) &&\n        response.statusText\n        ? new Error(response.statusText)\n        : error,\n      response\n    );\n  }\n}\n\n/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.\n *\n * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.\n * @param url - The endpoint URL for the GraphQL HTTP API.\n * @param fetchOptions - The {@link RequestInit} fetch options for the request.\n * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.\n *\n * @remarks\n * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,\n * supporting multipart incremental responses, cancellation and other smaller\n * implementation details.\n *\n * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API\n * it’s recommended you use this utility.\n *\n * Hint: This function does not use the passed `operation` to create or modify the\n * `fetchOptions` and instead expects that the options have already been created\n * using {@link makeFetchOptions} and modified as needed.\n *\n * @throws\n * If the `fetch` polyfill or globally available `fetch` function doesn’t support\n * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,\n * the source will throw “Streaming requests unsupported”.\n * This shouldn’t happen in modern browsers and Node.js.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport function makeFetchSource(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n): Source<OperationResult> {\n  let abortController: AbortController | void;\n  if (typeof AbortController !== 'undefined') {\n    fetchOptions.signal = (abortController = new AbortController()).signal;\n  }\n  return pipe(\n    fromAsyncIterable(fetchOperation(operation, url, fetchOptions)),\n    filter((result): result is OperationResult => !!result),\n    onEnd(() => {\n      if (abortController) abortController.abort();\n    })\n  );\n}\n"],"names":["rehydrateGraphQlError","error","message","extensions","name","GraphQLError","nodes","source","positions","path","CombinedError","Error","constructor","input","normalizedGraphQLErrors","graphQLErrors","map","generateErrorMessage","networkErr","graphQlErrs","err","networkError","super","this","response","toString","phash","x","seed","h","i","l","length","charCodeAt","seen","Set","cache","WeakMap","stringify","has","JSON","toJSON","Array","isArray","out","value","FileConstructor","NoopConstructor","BlobConstructor","keys","Object","sort","key","get","Math","random","slice","set","__key","add","delete","extract","stringifyVariables","clear","File","Blob","GRAPHQL_STRING_RE","REPLACE_CHAR_RE","replaceOutsideStrings","str","idx","replace","sanitizeDocument","node","split","join","trim","prints","Map","docs","stringifyDocument","printed","loc","body","print","start","end","locationOffset","line","column","hashDocument","definitions","operationName","getOperationName","keyDocument","query","parse","noLocation","createRequest","_query","_variables","variables","printedVars","kind","Kind","OPERATION_DEFINITION","undefined","getOperationType","operation","makeResult","result","errors","defaultHasNext","data","hasNext","stale","deepMerge","target","mergeResultPatch","prevResult","nextResult","pending","hasExtensions","incremental","withData","_loop","patch","push","assign","prop","part","res","find","pendingRes","id","subPath","items","startIndex","makeErrorResult","makeFetchBody","request","persistedQuery","miss","makeFetchURL","useGETMethod","context","preferGetMethod","url","URL","searchParams","finalUrl","serializeBody","json","files","extractFiles","size","form","FormData","append","index","file","values","makeFetchOptions","headers","accept","extraOptions","fetchOptions","toLowerCase","serializedBody","method","decoder","TextDecoder","boundaryHeaderRe","eventStreamRe","decode","async","streamBody","Symbol","asyncIterator","chunk","reader","getReader","read","done","cancel","chunks","boundary","buffer","boundaryIndex","indexOf","fetchOperation","networkMode","Promise","resolve","contentType","fetch","results","test","parseMultipartMixed","boundaryHeader","match","isPreamble","payload","preambleIndex","parseEventStream","parseJSON","text","status","statusText","makeFetchSource","abortController","AbortController","signal","onEnd","abort","filter","fromAsyncIterable"],"mappings":"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"}